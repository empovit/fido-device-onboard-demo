- ansible.builtin.debug:
    msg: "=== Setting up {{ component_name }} ==="

- name: Install packages
  ansible.builtin.package:
    name: "{{ package_names }}"
    state: present
  vars:
    package_names: "{{ ['fdo-' + component_name] if packages is undefined else packages }}"

- name: Ensure config directory
  ansible.builtin.file:
    path: "/etc/fdo/{{ component_name }}.conf.d"
    state: directory

- ansible.builtin.set_fact:
    component_directory_name: "{{ component_name | replace('-', '_') }}"

- ansible.builtin.set_fact:
    component_directory: "{{ fdo_working_directory }}/{{ component_directory_name }}"

- name: Ensure keys directory
  ansible.builtin.file:
    path: "{{ component_directory }}/keys"
    state: directory
  when: keys

- name: Ensure directories
  ansible.builtin.file:
    path: "{{ component_directory }}/{{ item }}"
    state: directory
  with_items: "{{ subdirectories}}"

- name: Copy cryptographic keys
  ansible.builtin.copy:
    src: "{{ keys_directory }}/{{ item }}"
    dest: "{{ component_directory }}/keys/{{ item }}"
    remote_src: "{{ remote_keys }}"
  with_items: "{{ keys }}"

- name: Generate configuration
  ansible.builtin.template:
    src: "{{ component_name }}.yml.j2"
    dest: /etc/fdo/{{ component_name }}.conf.d/{{ component_name }}.yml
    backup: true


- ansible.builtin.set_fact:
    image_builder_server: "{{ hostvars['image-builder'].ansible_host | default(hostvars['image-builder'].inventory_hostname) }}"

- name: Ensure registries directory exists
  ansible.builtin.file:
    path: /etc/containers/registries.conf.d
    state: directory

- name: Create registry entry
  ansible.builtin.template:
    src: registries.j2
    dest: "/etc/containers/registries.conf.d/003-r4e.conf"

- name: Ensure script directory
  ansible.builtin.file:
    path: /etc/fdo/scripts
    state: directory

- name: Create switch script
  ansible.builtin.copy:
    src: container-switch.sh
    dest: /etc/fdo/scripts/container-switch.sh

- name: Start fdo-{{ component_name }} service
  ansible.builtin.systemd:
    name: fdo-{{ component_name }}
    state: started
    enabled: true

- name: Open {{ component_name }} service port in firewall
  ansible.posix.firewalld:
    port: "{{ service_ports[component_name] }}/tcp"
    state: enabled
    permanent: true
    immediate: true
  vars:
    service_ports:
      manufacturing-server: 8080
      owner-onboarding-server: 8081
      rendezvous-server: 8082
      serviceinfo-api-server: 8083
